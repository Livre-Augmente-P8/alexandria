openapi: 3.0.0
info:
  description: "This is the API for the augmented book project."
  version: 0.5.0
  title: Augmented Book
  termsOfService: https://phundrak.com/privacy
  contact:
    email: lucien@phundrak.com
  license:
    name: AGPL 3.0
    url: https://www.gnu.org/licenses/agpl-3.0.txt
tags:
  - name: author
    description: Operations about authors
  - name: book
    description: Operations about books
  - name: book fragments
    description: Operations about book fragments
paths:
  /author:
    get:
      tags:
        - author
      summary: Get list of authors
      description: Get a list of all the authors stored in the library
      operationId: listAuthors
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    post:
      tags:
        - author
      summary: Add a new author to the library
      description: ""
      operationId: addNewAuthor
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/SimpleAuthor"
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input
    put:
      tags:
        - author
      summary: Update an existing author
      description: ""
      operationId: updateExistingAuthor
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Author"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid id supplied
        "404":
          description: Author not found
        "405":
          description: Validation exception
  /author/find:
    get:
      tags:
        - author
      summary: Find Author by properties
      description: Find authors by their name.
      operationId: findAuthor
      parameters:
        - name: name
          in: query
          description: The server will try to fuzzy-find the authorâ€™s name based on this value. Multiple values can be provided with a comma separated string.
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  "/author/{authorId}":
    get:
      tags:
        - author
      summary: Find author by ID
      description: Returns a single author
      operationId: getAuthorId
      parameters:
        - name: authorId
          in: path
          description: ID of author to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "400":
          description: Invalid ID supplied
        "404":
          description: Author not found
    delete:
      tags:
        - author
      summary: Deletes a author
      operationId: deleteAuthor
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
        - name: authorId
          in: path
          description: Author id to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Author not found
        "405":
          description: Validation exception
  /book:
    get:
      tags:
        - book
      summary: Get list of books
      description: Get a list of all the books stored in the library
      operationId: listBooks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      tags:
        - book
      summary: Add a new book to the library
      description: ""
      operationId: addNewBook
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/NewBook"
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input
    put:
      tags:
        - book
      summary: Update an existing book
      description: ""
      operationId: updateExistingBook
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Book"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid title supplied
        "404":
          description: Book not found
        "405":
          description: Validation exception
  /book/find:
    get:
      tags:
        - book
      summary: Find Book by properties
      description: Find books by its properties.
      operationId: findBook
      parameters:
        - name: author
          in: query
          description: Author values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: string
        - name: isbns
          in: query
          description: ISBNs to filter by
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: gender
          in: query
          description: Gender to filter by
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: type
          in: query
          description: Book type to filter by
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: invalid book type
  "/book/{bookId}":
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookId
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
    delete:
      tags:
        - book
      summary: Deletes a book
      operationId: deleteBook
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
  "/book/{bookId}/fragments":
    get:
      tags:
        - book fragments
      summary: Get list of book fragments
      description: Returns the list of fragments from a single book
      operationId: getBookFragments
      parameters:
        - name: bookId
          in: path
          description: ID of the book whose fragments to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookFragmentSimple"
  "/fragments":
    post:
      tags:
        - book fragments
      summary: Add a new fragment to a book
      description: "Add a new fragment to an existing book. If the rank of the fragment is too high, it will simply be appended and the actual rank will be returned by the API. If another fragment already exists at the same rank, treat this request as an insert and move the existing fragment and all the one step further."
      operationId: addNewBookFragment
      requestBody:
        $ref: "#/components/requestBodies/BookFragmentInsert"
      responses:
        "200":
          description: Successful operation
        "202":
          description: Successful operation, reranked
          content:
            application/json:
              schema:
                type: object
                properties:
                  newRank:
                    type: integer
                    example: 6
        "405":
          description: Invalid input
    put:
      tags:
        - book fragments
      summary: Update an existing book fragment
      description: "Change the content of a book fragment or reorder it"
      operationId: updateExistingBookFragment
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/BookFragment"
      responses:
        "200":
          description: Successful operation
        "202":
          description: Successful operation, reranked
          content:
            application/json:
              schema:
                type: object
                properties:
                  newRank:
                    type: integer
                    example: 6
        "400":
          description: Invalid title supplied
        "404":
          description: Book fragment not found
        "405":
          description: Validation exception
  "/fragment/{id}":
    get:
      tags:
        - book fragments
      summary: Get single book fragment
      description: Returns a single fragment of a specific book
      operationId: getSingleBookFragment
      parameters:
        - name: id
          in: path
          description: Id of the fragment to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookFragment"
    delete:
      tags:
        - book fragments
      summary: Delete a fragment
      operationId: deleteFragment
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Id of the fragment to delete
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Fragment not found
  "/fragment/{id}/reorder":
    put:
      tags:
        - book fragments
      summary: Reorder a book fragment
      description: Reorder a book fragment to the specified rank in the JSON body. If the target rank is too great, the fragment will be appended and the API will answer with the new rank.
      operationId: reorderFragment
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Id of the fragment to return
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: integer
                  example: 6
      responses:
        "200":
          description: Operation successful
        "202":
          description: Successful operation, reranked
          content:
            application/json:
              schema:
                type: object
                properties:
                  newRank:
                    type: integer
                    example: 6
        "400":
          description: Invalid ID supplied
        "404":
          description: Fragment not found

servers:
  - url: http://localhost:8000
components:
  requestBodies:
    BookArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Book"
      description: List of user object
      required: true
    SimpleAuthor:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SimpleAuthor"
      description: Simpler author object for creating new authors
      required: true
    Author:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Author"
      description: Author object that needs to be added to the library
      required: true
    Book:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Book"
      description: Book object that needs to be added to the library
      required: true
    NewBook:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewBook"
      description: Book object that needs to be added to the library
      required: true
    BookFragment:
      content:
        application/json:
          schema:
            type: object
            required:
              - fragment
            properties:
              fragment:
                $ref: "#/components/schemas/BookFragment"
              method:
                type: string
                description: "How to add the new book fragment"
                enum:
                  - simple
                  - append
                  - insert
              rank:
                type: integer
                description: "When inserting, at which rank to insert the fragment"
      description: BookFragment object that needs to be added to the library
      required: true
    BookFragmentInsert:
      content:
        application/json:
          schema:
            type: object
            required:
              - rank
              - fragment
            properties:
              rank:
                type: integer
                example: 6
              method:
                type: string
                example: "insert"
                enum:
                  - append
                  - insert
                  - replace
              fragment:
                $ref: "#/components/schemas/BookFragment"
  schemas:
    SimpleAuthor:
      type: object
      properties:
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Tolkien"
        penname:
          type: string
          example: "J.R.R. Tolkien"
    Author:
      type: object
      required:
        - lastName
      properties:
        id:
          type: string
          example: "Gillian Rubinstein"
        firstName:
          type: string
          example: "Gillian"
        lastName:
          type: string
          example: "Rubinstein"
        penname:
          type: string
          example: "Lian Hearn"
    BookFragmentSimple:
      type: object
      required:
        - rank
        - book
      properties:
        book:
          type: string
          example: "lord-of-the-rings-two-towers-tolkien"
        rank:
          type: integer
          example: 23
    NewBookFragment:
      type: object
      required:
        - text
        - rank
        - book
        - bgSoundType
        - imageType
      properties:
        book:
          type: string
          example: "lord-of-the-rings-two-towers-tolkien"
        rank:
          type: integer
          example: 23
        text:
          type: string
        oneShotSoundSource:
          type: string
          example: "https://s3.example.com/oneshot.mp3"
        bgSoundType:
          type: string
          description: "What should be played"
          enum:
            - none
            - same
            - url
        bgSoundSource:
          type: string
          example: "https://s3.example.com/bg.mp3"
        imageType:
          type: string
          description: "What kind of image should be used"
          enum:
            - none
            - same
            - auto
            - url
        imageSource:
          type: string
          example: "https://s3.example.com/bg.jpg"
    BookFragment:
      type: object
      required:
        - text
        - rank
        - book
        - bgSoundType
        - imageType
        - id
      properties:
        id:
          type: string
          example: "lotrtt-ch1-rank23"
        book:
          type: string
          example: "lord-of-the-rings-two-towers-tolkien"
        rank:
          type: integer
          example: 23
        text:
          type: string
        oneShotSoundSource:
          type: string
          example: "https://s3.example.com/oneshot.mp3"
        bgSoundType:
          type: string
          description: "What should be played"
          enum:
            - none
            - same
            - url
        bgSoundSource:
          type: string
          example: "https://s3.example.com/bg.mp3"
        imageType:
          type: string
          description: "What kind of image should be used"
          enum:
            - none
            - same
            - auto
            - url
        imageSource:
          type: string
          example: "https://s3.example.com/bg.jpg"
    Book:
      type: object
      required:
        - name
        - author
        - type
      properties:
        id:
          type: string
          example: "lord-of-the-rings-two-towers-tolkien"
        title:
          type: string
          example: "Lord of the Rings: Two Towers"
        author:
          type: string
          example: "jrrtolkien"
        isbns:
          type: array
          xml:
            name: isbn
            wrapped: true
          items:
            type: string
            example: "9780547928203"
        cover:
          type: string
          example: "https://upload.wikimedia.org/wikipedia/en/a/a1/The_Two_Towers_cover.gif"
        publisher:
          type: string
          example: "Harper Collins"
        published:
          type: string
          example: "2012-09-18"
        genres:
          type: array
          xml:
            name: genre
            wrapped: true
          items:
            type: string
            example: "fantasy"
        synopsis:
          type: string
          example: "Frodo and his Companions of the Ring have been beset by danger during their quest to prevent the Ruling Ring from falling into the hands of the Dark Lord by destroying it in the Cracks of Doom. They have lost the wizard, Gandalf, in a battle in the Mines of Moria. And Boromir, seduced by the power of the Ring, tried to seize it by force. While Frodo and Sam made their escape, the rest of the company was attacked by Orcs. Now they continue the journey alone down the great River Anduinâ€”alone, that is, save for the mysterious creeping figure that follows wherever they go."
        booktype:
          type: string
          description: "What kind of text is it"
          enum:
            - novel
            - short-story
            - poem
    NewBook:
      type: object
      required:
        - name
        - author
        - type
      properties:
        title:
          type: string
          example: "Lord of the Rings: Two Towers"
        author:
          type: string
          example: "jrrtolkien"
        isbns:
          type: array
          xml:
            name: isbn
            wrapped: true
          items:
            type: string
            example: "9780547928203"
        cover:
          type: string
          example: "https://upload.wikimedia.org/wikipedia/en/a/a1/The_Two_Towers_cover.gif"
        publisher:
          type: string
          example: "Harper Collins"
        published:
          type: string
          example: "2012-09-18"
        genres:
          type: array
          xml:
            name: genre
            wrapped: true
          items:
            type: string
            example: "fantasy"
        synopsis:
          type: string
          example: "Frodo and his Companions of the Ring have been beset by danger during their quest to prevent the Ruling Ring from falling into the hands of the Dark Lord by destroying it in the Cracks of Doom. They have lost the wizard, Gandalf, in a battle in the Mines of Moria. And Boromir, seduced by the power of the Ring, tried to seize it by force. While Frodo and Sam made their escape, the rest of the company was attacked by Orcs. Now they continue the journey alone down the great River Anduinâ€”alone, that is, save for the mysterious creeping figure that follows wherever they go."
        booktype:
          type: string
          description: "What kind of text is it"
          enum:
            - Novel
            - ShortStory
            - Poem
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
